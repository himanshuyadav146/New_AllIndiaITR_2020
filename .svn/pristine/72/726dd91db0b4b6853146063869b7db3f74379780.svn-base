package dell.com.allindiaitr.home

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.TypedValue
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import com.google.android.material.bottomnavigation.BottomNavigationMenuView
import dell.com.allindiaitr.R
import dell.com.allindiaitr.adapter.DashboardAdapter
import dell.com.allindiaitr.interfaces.API_Interface
import dell.com.allindiaitr.manualProcess.ManualActivity
import dell.com.allindiaitr.models.NewItrBase
import dell.com.allindiaitr.sliderscreen.RunOnce
import dell.com.allindiaitr.utils.*
import kotlinx.android.synthetic.main.activity_dashboard.*
import kotlinx.android.synthetic.main.app_toolbar.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class DashboardActivity : AppCompatActivity() {

    lateinit var mContext: Context
    lateinit var apI_Interface : API_Interface
    private var appPreferences: AppPreferences? = null
    var Refer2EarnShowIsActive: Boolean = false
    lateinit var Refer2EarnShowDescription: String
    lateinit var Refer2EarnShowType: String
    var undermaintenanceIsActive: Boolean = false
    lateinit var undermaintenanceDescription: String
    lateinit var undermaintenanceType: String
    var kycIsActive: Boolean = false
    lateinit var kycIsDescription: String
    lateinit var kycIsType: String
    var ITRIsActive: Boolean = false
    lateinit var ITRDescription: String
    lateinit var ITRType: String
    lateinit var versionName: String
    var newItrBase = NewItrBase.instance
    private var runOnce: RunOnce? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_dashboard)
        mContext = this
        apI_Interface = APIClient().getClient().create(API_Interface::class.java)
        appPreferences = AppPreferences(mContext)
//        toolbar_title.text = "Choose Service"
        toolbar_title.text =getString(R.string.title_choose_services)
        runOnce = RunOnce(this)
        apI_Interface = APIClient().getClient().create(API_Interface::class.java)
//        appPreferences = AppPreferences(mContext)
        versionName = mContext.packageManager.getPackageInfo(packageName, 0).versionName.toString()

        newItrBase.selectedUser_userAssessmentYearUserID = null

        visibilityLayout(undermaintenanceIsActive)
        setRecyclerView()

//        Crashlytics.getInstance().crash()    For crash Testing


        bottomNavigationView.selectedItemId = R.id.navigation_home
        var menuView: BottomNavigationMenuView = bottomNavigationView.getChildAt(0) as BottomNavigationMenuView
        for (i in 0 until menuView.childCount){
            var iconView = menuView.getChildAt(i).findViewById<View>(R.id.icon)
            var layoutParams = iconView.layoutParams
            var displayMetrics = resources.displayMetrics
            layoutParams.height = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 20F, displayMetrics).toInt()
            layoutParams.width = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 20F, displayMetrics).toInt()
            iconView.layoutParams = layoutParams
        }

        bottomNavigationView.setOnNavigationItemSelectedListener {
            if (!ConnectionDetector().isConnectingToInternet(mContext)){
                Toast.makeText(mContext, "Please Check Your Internet Connection", Toast.LENGTH_SHORT).show()
                return@setOnNavigationItemSelectedListener false
            }
            when (it.itemId) {
                R.id.navigation_home -> return@setOnNavigationItemSelectedListener false
                R.id.navigation_orders -> {
                    newItrBase.orderMode = "AllOrders"
//                    val intent = Intent(mContext, AllOrdersActivity::class.java)
                    val intent = Intent(mContext, ManualActivity::class.java)
                    intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION)
                    startActivityForResult(intent, 0)
                    overridePendingTransition(0, 0)
                    finish()
                    return@setOnNavigationItemSelectedListener true
                }
                R.id.navigation_refer -> {
                    newItrBase.orderMode = "Orders"
                    val intent = Intent(mContext, ReferAndEarnActivity::class.java)
                    intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION)
                    startActivityForResult(intent, 0)
                    overridePendingTransition(0, 0)
                    finish()


                    return@setOnNavigationItemSelectedListener true
                }
                R.id.navigation_more-> {
                    newItrBase.orderMode = "Orders"
                    val intent = Intent(mContext, MoreActivity::class.java)
                    intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION)
                    startActivityForResult(intent, 0)
                    overridePendingTransition(0, 0)
                    finish()
                    return@setOnNavigationItemSelectedListener true
                }
                else -> return@setOnNavigationItemSelectedListener false
            }
        }

    }




    override fun attachBaseContext(newBase:Context?){
        appPreferences= AppPreferences(newBase!!)
        val lang:String=appPreferences?.selectedLanguage!!
        super.attachBaseContext(MyContextWrapper.wrap(newBase,lang))

    }

    override fun onResume() {
        super.onResume()
        if (ConnectionDetector().isConnectingToInternet(mContext)){
            getVersionUpdate()
        }
        else{
//            dashboard_layout.visibility = View.GONE
            under_maintanence_layout.visibility = View.GONE
            Toast.makeText(mContext, "Please Check Your Internet Connection", Toast.LENGTH_SHORT).show()
        }
    }

    private fun getVersionUpdate(){
//        var dialog = AlertDialogueManager(mContext,"Please Wait")
        var dialog = AlertDialogueManager(mContext,getString(R.string.dilog_pleasewait))
        val call = apI_Interface.versionUpdate("Android", appPreferences!!.parentId.toString())
        call.enqueue(object : Callback<NewItrBase> {
            override fun onResponse(call: Call<NewItrBase>?, response: Response<NewItrBase>?) {
                try {
                    if (response!!.isSuccessful){
                        dialog.hideDialog()
                        newItrBase.iTRComputationURL = response.body().iTRComputationURL?.takeUnless { it.isEmpty() } ?: ""
                        var mobileAppVersion = response.body().mobileAppVersion?.takeUnless { it.isEmpty() } ?: ""
                        var alertMessage = response.body().alertMessage?.takeUnless { it.isEmpty() } ?: ""
                        newItrBase.isNewUser = if (response.body().childUserCount != null) response.body()!!.childUserCount!! else true
                        var appUtilityList = response.body().appUtilityList as MutableList<NewItrBase>
                        for (i in 0 until appUtilityList.size){
                            when (appUtilityList[i].type) {
                                "Refer2EarnShow" -> {
                                    Refer2EarnShowIsActive = if (appUtilityList[i].isActive != null) appUtilityList[i].isActive!! else false
                                    Refer2EarnShowDescription = appUtilityList[i].description?.takeUnless { it.isEmpty() } ?: ""
                                    Refer2EarnShowType = appUtilityList[i].type?.takeUnless { it.isEmpty() } ?: ""
                                }
                                "undermaintenance" -> {
                                    undermaintenanceIsActive = if (appUtilityList[i].isActive != null) appUtilityList[i].isActive!! else false
                                    undermaintenanceDescription = appUtilityList[i].description?.takeUnless { it.isEmpty() } ?: ""
                                    undermaintenanceType = appUtilityList[i].type?.takeUnless { it.isEmpty() } ?: ""
                                }
                                "KYCClosed" -> {
                                    kycIsActive = if (appUtilityList[i].isActive != null) appUtilityList[i].isActive!! else false
                                    kycIsDescription = appUtilityList[i].description?.takeUnless { it.isEmpty() } ?: ""
                                    kycIsType = appUtilityList[i].type?.takeUnless { it.isEmpty() } ?: ""
                                }
                                "ITRClosed" -> {
                                    ITRIsActive = if (appUtilityList[i].isActive != null) appUtilityList[i].isActive!! else false
                                    ITRDescription = appUtilityList[i].description?.takeUnless { it.isEmpty() } ?: ""
                                    ITRType = appUtilityList[i].type?.takeUnless { it.isEmpty() } ?: ""
                                }
                            }
                        }
                        visibilityLayout(undermaintenanceIsActive)

                        if (versionName.toFloat() < mobileAppVersion.toFloat()) {
                            AlertDialogueManager().updateVersionDialogue(mContext, alertMessage.toString())
                        }

                        if (appPreferences!!.appLaunch){
//                        if(runOnce!!.isFirstTimeLaunch){
                            if (newItrBase.referNowVisible){
                                if (newItrBase.isReferVisible && Refer2EarnShowIsActive){
                                    if ((Refer2EarnShowDescription.toInt() > newItrBase.referNCount)){
                                        AlertDialogueManager().referAndEarnDialogue(mContext)
                                        newItrBase.referNCount = newItrBase.referNCount + 1
                                    }
                                }
                            }
                        }
                    }
                    else{
                        dialog.hideDialog()
                        dashboard_layout.visibility = View.GONE
                        under_maintanence_layout.visibility = View.GONE
                        oops_imageView.visibility = View.VISIBLE
                    }
                }
                catch (e: Exception){
                    dialog.hideDialog()
                    dashboard_layout.visibility = View.GONE
                    under_maintanence_layout.visibility = View.GONE
                    oops_imageView.visibility = View.VISIBLE
                    Toast.makeText(mContext, resources.getString(R.string.error_message), Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<NewItrBase>?, t: Throwable?) {
                dialog.hideDialog()
                dashboard_layout.visibility = View.GONE
                under_maintanence_layout.visibility = View.GONE
                oops_imageView.visibility = View.VISIBLE
                Toast.makeText(mContext, resources.getString(R.string.error_message), Toast.LENGTH_SHORT).show()
            }

        })
    }

    fun visibilityLayout(undermaintenanceIsActive: Boolean){
        if (undermaintenanceIsActive){
            dashboard_layout.visibility = View.GONE
            under_maintanence_layout.visibility = View.VISIBLE
            oops_imageView.visibility = View.GONE
        }
        else {
            dashboard_layout.visibility = View.VISIBLE
            under_maintanence_layout.visibility = View.GONE
            oops_imageView.visibility = View.GONE
        }
    }

    private fun setRecyclerView(){
        var heading: List<String> = listOf<String>(getString(R.string.dashboard_starte_filing),
            getString(R.string.dashboard_incometax),
            getString(R.string.dashboard_hra),
            getString(R.string.dashboard_rent_recipt))

        var description: List<String> = listOf<String>(getString(R.string.dashboard_sub_starte_filing),
            getString(R.string.dashboard_sub_incometax),
            getString(R.string.dashboard_sub_hra),
            getString(R.string.dashboard_sub_rent_recipt))

        var images: List<Int> = listOf<Int>(R.drawable.ic_start_e_filing,
            R.drawable.ic_income_tax_calculator,
            R.drawable.ic_hra_calculator,
            R.drawable.ic_rent_reciept_generator)

        dashboard_recyclerView.layoutManager = LinearLayoutManager(mContext)
        dashboard_recyclerView.adapter = DashboardAdapter(mContext, heading, description, images)
    }

    override fun onBackPressed() {
        super.onBackPressed()
        finishAffinity()
//      finish()

    }

}
