package dell.com.allindiaitr.submitDocument

import android.app.Activity
import android.content.Context
import android.content.Intent
import android.content.res.ColorStateList
import android.graphics.Color
import android.os.Build
import android.os.Bundle
import android.os.Parcelable
import android.view.MenuItem
import android.view.View
import android.view.inputmethod.InputMethodManager
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import dell.com.allindiaitr.Enum.CommonVal

import dell.com.allindiaitr.adapter.UserListExpandableAdapter
import dell.com.allindiaitr.interfaces.API_Interface
import dell.com.allindiaitr.models.NewItrBase
import dell.com.allindiaitr.utils.APIClient
import kotlinx.android.synthetic.main.activity_user_list.*
import java.io.Serializable
import java.lang.Exception
import java.util.ArrayList
import androidx.core.content.ContextCompat.getSystemService
import com.google.gson.GsonBuilder
import androidx.core.app.ComponentActivity
import androidx.core.app.ComponentActivity.ExtraData
import androidx.core.content.ContextCompat.getSystemService
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import dell.com.allindiaitr.R
import dell.com.allindiaitr.models.UserListHolder
import dell.com.allindiaitr.utils.AppPreferences
import dell.com.allindiaitr.utils.MyContextWrapper
import java.lang.reflect.Type


class UserListActivity : AppCompatActivity() {

    lateinit var mContext: Context
    lateinit var apI_Interface : API_Interface
    var prevExpandPosition: Int = -1
    var newItrBase = NewItrBase.instance
    var userListModel = NewItrBase.instance
    var childUserListModel = NewItrBase.instance
    var userList = mutableListOf<NewItrBase>()
    var listData = HashMap<String, List<NewItrBase>>()
    private var appPreferences: AppPreferences? = null
    var userListHolder:UserListHolder= UserListHolder.instance

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_user_list)
        mContext = this
        apI_Interface = APIClient().getClient().create(API_Interface::class.java)


        setSupportActionBar(toolbar)
        supportActionBar!!.setDisplayShowTitleEnabled(false)
        supportActionBar!!.setDisplayHomeAsUpEnabled(true)
        toolbar_title1.text=getString(R.string.title_select_User)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)
            start_new_filing_button.backgroundTintList = mContext.getColorStateList(R.color.white)
        else
            ViewCompat.setBackgroundTintList(start_new_filing_button, ColorStateList.valueOf(Color.rgb(255, 255, 255)))

        start_new_filing_button.setOnClickListener {
            try {
                newItrBase.selectedUser_userAssessmentYearUserID = null
                val intent1 = Intent(mContext, SelectITRActivity::class.java)
//                intent1.putExtra("userList", userList as Serializable)
//                intent1.putExtra("listData", listData as Serializable)
//                intent1.putParcelableArrayListExtra("userList", userList as ArrayList<out Parcelable>)
//                intent1.putExtra("listData", listData as HashMap<String, List<NewItrBase>>)
                userListHolder.userList=userList
                userListHolder.listData=listData

                overridePendingTransition(R.anim.slide_from_right, R.anim.slide_to_left)
                startActivity(intent1)
            }catch (e:Exception){
                Toast.makeText(mContext,"Error",Toast.LENGTH_LONG).show()
            }


        }

        initializer()
        newItrBase.flagInfo = false
        getUserList()
    }


    override fun attachBaseContext(newBase:Context?){
        mContext= newBase!!
        appPreferences= AppPreferences(newBase!!)
        val lang:String=appPreferences?.selectedLanguage!!
        //  setAppLocal(lang)
        super.attachBaseContext(MyContextWrapper.wrap(newBase,lang))

    }


    override fun onOptionsItemSelected(item: MenuItem?): Boolean {
        var id = item!!.itemId
        if (id == android.R.id.home){
            val imm = mContext.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager
            imm.hideSoftInputFromWindow(currentFocus?.windowToken, 0)
            val intent = Intent(mContext, StartEFilingActivity::class.java)
            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION)
            startActivityForResult(intent, 0)
            overridePendingTransition(0, 0)
            finish()
        }
        return super.onOptionsItemSelected(item)
    }

    override fun onBackPressed() {
//        val intent = Intent(mContext, StartEFilingActivity::class.java)
//        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION)
//        startActivityForResult(intent, 0)
//        overridePendingTransition(0, 0)
//        finish()


        val intent = Intent(applicationContext, StartEFilingActivity::class.java)
        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION)
        startActivityForResult(intent, 0)
        overridePendingTransition(0, 0)
        finish()
    }

    private fun initializer(){
        expandable_list_view.setOnGroupExpandListener { groupPosition ->
            if (prevExpandPosition != -1
                && groupPosition != prevExpandPosition) {
                expandable_list_view.collapseGroup(prevExpandPosition)
            }
            prevExpandPosition = groupPosition
        }

        expandable_list_view.setOnGroupCollapseListener {
        }

        expandable_list_view.setOnChildClickListener { _, _, _, _, _ ->
            false
        }
    }

    private fun visibility(visible: Boolean){
        if (visible){
            oops_image.visibility = View.GONE
            user_list_layout.visibility = View.VISIBLE
        }
        else {
            oops_image.visibility = View.VISIBLE
            user_list_layout.visibility = View.GONE
        }
    }

    private fun getUserList(){
        if (newItrBase.baseUserList != null && newItrBase.baseUserList!!.isNotEmpty()){
            visibility(true)
            for (i in 0 until newItrBase.baseUserList!!.size){
                userListModel = newItrBase.baseUserList!![i]
                var childList = mutableListOf<NewItrBase>()
                for (j in 0 until userListModel.childUserStatus!!.size){
                    childUserListModel = userListModel.childUserStatus!![j]
                    if (childUserListModel.processMode.equals(CommonVal.EVerify.name) && childUserListModel.paymentStatus == false)
                    else if (childUserListModel.processMode.equals(CommonVal.RevisedReturn.name) && childUserListModel.paymentStatus == false)
                    else
                        childList.add(childUserListModel)
                }

                if (childList.size!=0){
                    userList.add(userListModel)
                    listData[newItrBase.baseUserList!![i].panNumber.toString()] = childList
                }
            }
            expandable_list_view.setAdapter(UserListExpandableAdapter(mContext, expandable_list_view, listData, userList))
            expandable_list_view.expandGroup(0)
        }
        else
            visibility(false)
    }
}
